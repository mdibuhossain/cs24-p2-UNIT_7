generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int         @id @default(autoincrement())
  email        String      @unique @db.VarChar(200)
  password     String
  name         String?     @db.VarChar(200)
  contact      String?
  photo        String?
  createdAt    DateTime    @default(now())
  role         RoleType    @default(UNASSIGNED)
  stsId        Int?
  Sts          Sts?        @relation(fields: [stsId], references: [id])
  landfillId   Int?
  Landfill     Landfill?   @relation(fields: [landfillId], references: [id])
  contractorId Int?
  Contractor   Contractor? @relation(fields: [contractorId], references: [id])
  Workforce    Workforce[]
}

model Workforce {
  id                  Int       @id @default(autoincrement())
  name                String
  dateOfBirth         DateTime?
  dateOfHire          DateTime?
  jobTitle            String?
  paymentRatePerHour  String?
  contact             String?
  collectionRoute     String?
  contractorManagerId Int?
  ContractorManager   User?     @relation(fields: [contractorManagerId], references: [id])
}

model Role {
  id    Int      @id @default(autoincrement())
  title RoleType @unique @default(UNASSIGNED)
}

// system admin can create vehicle
model Vehicle {
  id                 Int                  @id @default(autoincrement())
  type               String
  reg_no             Int                  @unique
  capacity           Int
  loaded_cost        Int
  unloaded_cost      Int
  sts_vehicle_record sts_vehicle_record[]
  dump_records       dump_record[]
}

// system admin can create sts manager
model Sts {
  id                 Int                  @id @default(autoincrement())
  ward               Int                  @unique
  capacity           Int
  latitude           Float
  longitude          Float
  lastHour           DateTime?
  fine               Float?
  managers           User[]
  sts_vehicle_record sts_vehicle_record[]
  dump_records       dump_record[]
  Contractor         Contractor[]
  sts_receives       sts_receives[]
}

// system admin can create landfill manager
model Landfill {
  id           Int           @id @default(autoincrement())
  capacity     Int
  latitude     Float
  longitude    Float
  manager      User[]
  dump_records dump_record[]
}

// sts manager can create sts vehicle record
model sts_vehicle_record {
  id             Int      @id @default(autoincrement())
  waste          Int
  arrival_time   DateTime
  departure_time DateTime
  Sts            Sts?     @relation(fields: [stsId], references: [id])
  stsId          Int?
  Vehicle        Vehicle? @relation(fields: [reg_no], references: [reg_no])
  reg_no         Int?
}

// sts manager can create sts receives record
model sts_receives {
  id           Int         @id @default(autoincrement())
  waste        Int
  typeOfWaste  String
  vehicleType  String
  arrival_time DateTime
  Sts          Sts?        @relation(fields: [stsId], references: [id])
  stsId        Int?
  Contractor   Contractor? @relation(fields: [contractorId], references: [id])
  contractorId Int?
}

// landfill manager can create dump record
model dump_record {
  id             Int       @id @default(autoincrement())
  weight         Int
  arrival_time   DateTime
  departure_time DateTime
  Landfill       Landfill? @relation(fields: [landfillId], references: [id])
  landfillId     Int?
  Vehicle        Vehicle?  @relation(fields: [vehicleId], references: [id])
  vehicleId      Int?
  Sts            Sts?      @relation(fields: [stsId], references: [id])
  stsId          Int?
}

// system admin can create contractor manager
model Contractor {
  id                  Int            @id @default(autoincrement())
  name                String
  contractId          Int            @unique
  registrationId      Int            @unique
  tin                 String
  contact             String
  area                String
  workforce           Int
  paymentPerTon       Int
  requiredWasteAmount Int
  contractDuration    Int
  registrationDate    DateTime       @default(now())
  createdAt           DateTime       @default(now())
  Sts                 Sts?           @relation(fields: [stsId], references: [id])
  stsId               Int?
  User                User[]
  sts_receives        sts_receives[]
}

// only contractor manager can create collection plan
model collection_plan {
  id              Int      @id @default(autoincrement())
  area            String
  collectionStart DateTime
  duration        Int
  numberOfLabour  Int
  numberofVans    Int
  expectedWaste   Int
}

enum RoleType {
  UNASSIGNED
  SYSTEM_ADMIN
  STS_MANAGER
  LANDFILL_MANAGER
  CONTRACTOR_MANAGER
}
